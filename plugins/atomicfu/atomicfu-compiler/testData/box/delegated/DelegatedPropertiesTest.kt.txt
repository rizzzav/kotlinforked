private val _topLevelInt: AtomicInt
  field = atomic(initial = 42)
  private get

var topLevelInt: Int /* by */
  field = <get-_topLevelInt>()
  get(): Int {
    return #topLevelInt$delegate.getValue(thisRef = null, property = ::topLevelInt)
  }
  set(<set-?>: Int) {
    return #topLevelInt$delegate.setValue(thisRef = null, property = ::topLevelInt, value = <set-?>)
  }

private var topLevelVolatile: Int /* by */
  field = atomic(initial = 56)
  private get(): Int {
    return #topLevelVolatile$delegate.getValue(thisRef = null, property = ::topLevelVolatile)
  }
  private set(<set-?>: Int) {
    return #topLevelVolatile$delegate.setValue(thisRef = null, property = ::topLevelVolatile, value = <set-?>)
  }

class DelegatedProperties {
  private val _a: AtomicInt
    field = atomic(initial = 42)
    private get

  var a: Int /* by */
    field = <this>.<get-_a>()
    get(): Int {
      return <this>.#a$delegate.getValue(thisRef = <this>, property = DelegatedProperties::a)
    }
    set(<set-?>: Int) {
      return <this>.#a$delegate.setValue(thisRef = <this>, property = DelegatedProperties::a, value = <set-?>)
    }

  private var privateA: Int /* by */
    field = <this>.<get-_a>()
    private get(): Int {
      return <this>.#privateA$delegate.getValue(thisRef = <this>, property = DelegatedProperties::privateA)
    }
    private set(<set-?>: Int) {
      return <this>.#privateA$delegate.setValue(thisRef = <this>, property = DelegatedProperties::privateA, value = <set-?>)
    }

  private val _l: AtomicLong
    field = atomic(initial = 55555555555L)
    private get

  private var l: Long /* by */
    field = <this>.<get-_l>()
    private get(): Long {
      return <this>.#l$delegate.getValue(thisRef = <this>, property = DelegatedProperties::l)
    }
    private set(<set-?>: Long) {
      return <this>.#l$delegate.setValue(thisRef = <this>, property = DelegatedProperties::l, value = <set-?>)
    }

  private val _b: AtomicBoolean
    field = atomic(initial = false)
    private get

  private var b: Boolean /* by */
    field = <this>.<get-_b>()
    private get(): Boolean {
      return <this>.#b$delegate.getValue(thisRef = <this>, property = DelegatedProperties::b)
    }
    private set(<set-?>: Boolean) {
      return <this>.#b$delegate.setValue(thisRef = <this>, property = DelegatedProperties::b, value = <set-?>)
    }

  private val _ref: AtomicRef<A>
    field = atomic<A>(initial = A(b = B(n = 77)))
    private get

  private var ref: A /* by */
    field = <this>.<get-_ref>()
    private get(): A {
      return <this>.#ref$delegate.getValue(thisRef = <this>, property = DelegatedProperties::ref)
    }
    private set(<set-?>: A) {
      return <this>.#ref$delegate.setValue(thisRef = <this>, property = DelegatedProperties::ref, value = <set-?>)
    }

  private var vInt: Int /* by */
    field = atomic(initial = 77)
    private get(): Int {
      return <this>.#vInt$delegate.getValue(thisRef = <this>, property = DelegatedProperties::vInt)
    }
    private set(<set-?>: Int) {
      return <this>.#vInt$delegate.setValue(thisRef = <this>, property = DelegatedProperties::vInt, value = <set-?>)
    }

  private var vLong: Int /* by */
    field = atomic(initial = 777777777)
    private get(): Int {
      return <this>.#vLong$delegate.getValue(thisRef = <this>, property = DelegatedProperties::vLong)
    }
    private set(<set-?>: Int) {
      return <this>.#vLong$delegate.setValue(thisRef = <this>, property = DelegatedProperties::vLong, value = <set-?>)
    }

  private var vBoolean: Boolean /* by */
    field = atomic(initial = false)
    private get(): Boolean {
      return <this>.#vBoolean$delegate.getValue(thisRef = <this>, property = DelegatedProperties::vBoolean)
    }
    private set(<set-?>: Boolean) {
      return <this>.#vBoolean$delegate.setValue(thisRef = <this>, property = DelegatedProperties::vBoolean, value = <set-?>)
    }

  private var vRef: A /* by */
    field = atomic<A>(initial = A(b = B(n = 77)))
    private get(): A {
      return <this>.#vRef$delegate.getValue(thisRef = <this>, property = DelegatedProperties::vRef)
    }
    private set(<set-?>: A) {
      return <this>.#vRef$delegate.setValue(thisRef = <this>, property = DelegatedProperties::vRef, value = <set-?>)
    }

  class A {
    val b: B
      field = b
      get

    constructor(b: B) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  class B {
    val n: Int
      field = n
      get

    constructor(n: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun test() {
    <this>.testDelegatedAtomicInt()
    <this>.testDelegatedAtomicLong()
    <this>.testDelegatedAtomicBoolean()
    <this>.testDelegatedAtomicRef()
    <this>.testVolatileInt()
    <this>.testVolatileBoolean()
    <this>.testVolatileLong()
    <this>.testVolatileRef()
    <this>.testDelegatedVariablesFlow()
  }

  fun testDelegatedAtomicBoolean() {
    assertEquals<Boolean>(expected = false, actual = <this>.<get-b>())
    <this>.<get-_b>().lazySet(value = true)
    assertEquals<Boolean>(expected = true, actual = <this>.<get-b>())
    <this>.<set-b>(<set-?> = false)
    assertTrue(actual = <this>.<get-_b>().compareAndSet(expect = false, update = true))
    assertEquals<Boolean>(expected = true, actual = <this>.<get-_b>().<get-value>())
    assertEquals<Boolean>(expected = true, actual = <this>.<get-b>())
  }

  fun testDelegatedAtomicInt() {
    assertEquals<Int>(expected = 42, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 42, actual = <this>.<get-privateA>())
    <this>.<get-_a>().compareAndSet(expect = 42, update = 56) /*~> Unit */
    assertEquals<Int>(expected = 56, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 56, actual = <this>.<get-privateA>())
    <this>.<set-a>(<set-?> = 77)
    <this>.<get-_a>().compareAndSet(expect = 77, update = 66) /*~> Unit */
    <this>.<set-privateA>(<set-?> = 88)
    <this>.<get-_a>().compareAndSet(expect = 88, update = 66) /*~> Unit */
    assertEquals<Int>(expected = 66, actual = <this>.<get-_a>().<get-value>())
    assertEquals<Int>(expected = 66, actual = <this>.<get-a>())
    assertEquals<Int>(expected = 66, actual = <this>.<get-privateA>())
    val aValue: Int = <this>.<get-a>().plus(other = <this>.<get-privateA>())
    assertEquals<Int>(expected = 132, actual = aValue)
  }

  fun testDelegatedAtomicLong() {
    assertEquals<Long>(expected = 55555555555L, actual = <this>.<get-l>())
    <this>.<get-_l>().getAndIncrement() /*~> Unit */
    assertEquals<Long>(expected = 55555555556L, actual = <this>.<get-l>())
    <this>.<set-l>(<set-?> = 7777777777777L)
    assertTrue(actual = <this>.<get-_l>().compareAndSet(expect = 7777777777777L, update = 66666666666L))
    assertEquals<Long>(expected = 66666666666L, actual = <this>.<get-_l>().<get-value>())
    assertEquals<Long>(expected = 66666666666L, actual = <this>.<get-l>())
  }

  fun testDelegatedAtomicRef() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-ref>().<get-b>().<get-n>())
    <this>.<get-_ref>().lazySet(value = A(b = B(n = 66)))
    assertEquals<Int>(expected = 66, actual = <this>.<get-ref>().<get-b>().<get-n>())
    assertTrue(actual = <this>.<get-_ref>().compareAndSet(expect = <this>.<get-_ref>().<get-value>(), update = A(b = B(n = 56))))
    assertEquals<Int>(expected = 56, actual = <this>.<get-ref>().<get-b>().<get-n>())
    <this>.<set-ref>(<set-?> = A(b = B(n = 99)))
    assertEquals<Int>(expected = 99, actual = <this>.<get-_ref>().<get-value>().<get-b>().<get-n>())
  }

  fun testDelegatedVariablesFlow() {
    <this>.<get-_a>().lazySet(value = 55)
    assertEquals<Int>(expected = 55, actual = <this>.<get-_a>().<get-value>())
    assertEquals<Int>(expected = 55, actual = <this>.<get-a>())
    var aValue: Int = <this>.<get-a>()
    assertEquals<Int>(expected = 55, actual = aValue)
  }

  fun testVolatileBoolean() {
    assertEquals<Boolean>(expected = false, actual = <this>.<get-vBoolean>())
    <this>.<set-vBoolean>(<set-?> = true)
    assertEquals<Boolean>(expected = true, actual = <this>.<get-vBoolean>())
  }

  fun testVolatileInt() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-vInt>())
    <this>.<set-vInt>(<set-?> = 55)
    assertEquals<Int>(expected = 110, actual = <this>.<get-vInt>().times(other = 2))
  }

  fun testVolatileLong() {
    assertEquals<Int>(expected = 777777777, actual = <this>.<get-vLong>())
    <this>.<set-vLong>(<set-?> = 55)
    assertEquals<Int>(expected = 55, actual = <this>.<get-vLong>())
  }

  fun testVolatileRef() {
    assertEquals<Int>(expected = 77, actual = <this>.<get-vRef>().<get-b>().<get-n>())
    <this>.<set-vRef>(<set-?> = A(b = B(n = 99)))
    assertEquals<Int>(expected = 99, actual = <this>.<get-vRef>().<get-b>().<get-n>())
  }

}

fun box(): String {
  val testClass: DelegatedProperties = DelegatedProperties()
  testClass.test()
  testTopLevelDelegatedProperties()
  testTopLevelVolatileProperties()
  return "OK"
}

fun testTopLevelDelegatedProperties() {
  assertEquals<Int>(expected = 42, actual = <get-topLevelInt>())
  <get-_topLevelInt>().compareAndSet(expect = 42, update = 56) /*~> Unit */
  assertEquals<Int>(expected = 56, actual = <get-topLevelInt>())
  <set-topLevelInt>(<set-?> = 77)
  <get-_topLevelInt>().compareAndSet(expect = 77, update = 66) /*~> Unit */
  assertEquals<Int>(expected = 66, actual = <get-_topLevelInt>().<get-value>())
  assertEquals<Int>(expected = 66, actual = <get-topLevelInt>())
}

fun testTopLevelVolatileProperties() {
  assertEquals<Int>(expected = 56, actual = <get-topLevelVolatile>())
  <set-topLevelVolatile>(<set-?> = 55)
  assertEquals<Int>(expected = 110, actual = <get-topLevelVolatile>().times(other = 2))
}
