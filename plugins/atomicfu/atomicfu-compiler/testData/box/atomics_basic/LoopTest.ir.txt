FILE fqName:<root> fileName:/LoopTest.kt
  CLASS CLASS name:LoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LoopTest
    PROPERTY name:a visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=0
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:a visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-a>' type=<root>.LoopTest origin=null
    PROPERTY name:a1 visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=1
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a1> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:a1 visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-a1>' type=<root>.LoopTest origin=null
    PROPERTY name:b visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:b type:kotlinx.atomicfu.AtomicBoolean visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Boolean): kotlinx.atomicfu.AtomicBoolean declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicBoolean origin=null
            ARG initial: CONST Boolean type=kotlin.Boolean value=true
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-b> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicBoolean
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:b visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:b type:kotlinx.atomicfu.AtomicBoolean visibility:private [final]' type=kotlinx.atomicfu.AtomicBoolean origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-b>' type=<root>.LoopTest origin=null
    PROPERTY name:l visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:l type:kotlinx.atomicfu.AtomicLong visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Long): kotlinx.atomicfu.AtomicLong declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicLong origin=null
            ARG initial: CONST Long type=kotlin.Long value=5000000000
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-l> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicLong
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:l visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:l type:kotlinx.atomicfu.AtomicLong visibility:private [final]' type=kotlinx.atomicfu.AtomicLong origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-l>' type=<root>.LoopTest origin=null
    PROPERTY name:r visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:r type:kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic <T> (initial: T of kotlinx.atomicfu.atomic): kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.atomic> declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=null
            TYPE_ARG T: <root>.LoopTest.A
            ARG initial: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
              ARG s: CONST String type=kotlin.String value="aaaa"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-r> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A>
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:r visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:r type:kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> visibility:private [final]' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-r>' type=<root>.LoopTest origin=null
    PROPERTY name:rs visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:rs type:kotlinx.atomicfu.AtomicRef<kotlin.String> visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic <T> (initial: T of kotlinx.atomicfu.atomic): kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.atomic> declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicRef<kotlin.String> origin=null
            TYPE_ARG T: kotlin.String
            ARG initial: CONST String type=kotlin.String value="bbbb"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-rs> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicRef<kotlin.String>
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
        correspondingProperty: PROPERTY name:rs visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-rs> (): kotlinx.atomicfu.AtomicRef<kotlin.String> declared in <root>.LoopTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:rs type:kotlinx.atomicfu.AtomicRef<kotlin.String> visibility:private [final]' type=kotlinx.atomicfu.AtomicRef<kotlin.String> origin=null
              receiver: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.<get-rs>' type=<root>.LoopTest origin=null
    CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]
      thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.LoopTest.A
      PROPERTY name:s visibility:public modality:FINAL [val]
        FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]
          EXPRESSION_BODY
            GET_VAR 's: kotlin.String declared in <root>.LoopTest.A.<init>' type=kotlin.String origin=INITIALIZE_PROPERTY_FROM_PARAMETER
        FUN DEFAULT_PROPERTY_ACCESSOR name:<get-s> visibility:public modality:FINAL returnType:kotlin.String
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest.A
          correspondingProperty: PROPERTY name:s visibility:public modality:FINAL [val]
          BLOCK_BODY
            RETURN type=kotlin.Nothing from='public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A'
              GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlin.String visibility:private [final]' type=kotlin.String origin=null
                receiver: GET_VAR '<this>: <root>.LoopTest.A declared in <root>.LoopTest.A.<get-s>' type=<root>.LoopTest.A origin=null
      CONSTRUCTOR visibility:public returnType:<root>.LoopTest.A [primary]
        VALUE_PARAMETER kind:Regular name:s index:0 type:kotlin.String
        BLOCK_BODY
          DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:A modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
      FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
        overridden:
          public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun hashCode (): kotlin.Int declared in kotlin.Any
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
        overridden:
          public open fun toString (): kotlin.String declared in kotlin.Any
    CONSTRUCTOR visibility:public returnType:<root>.LoopTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:LoopTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:atomicfuBooleanGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Boolean): kotlin.Unit declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Boolean type=kotlin.Boolean value=false
        VAR name:resBool type:kotlin.Boolean [val]
          CALL 'public final fun getAndUpdate (<this>: kotlinx.atomicfu.AtomicBoolean, function: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in kotlinx.atomicfu' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
                          ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest.<anonymous>' type=kotlin.Boolean origin=null
                        then: BLOCK type=kotlin.Boolean origin=null
                          CALL 'public final fun compareAndSet (expect: kotlin.Boolean, update: kotlin.Boolean): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=null
                            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expect: CONST Boolean type=kotlin.Boolean value=false
                            ARG update: CONST Boolean type=kotlin.Boolean value=true
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Boolean origin=null
                          CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: GET_VAR 'val resBool: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=kotlin.Boolean origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuBooleanLoopTest visibility:public modality:FINAL returnType:kotlin.Boolean
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Boolean
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Boolean): kotlin.Unit declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun loop (<this>: kotlinx.atomicfu.AtomicBoolean, action: kotlin.Function1<kotlin.Boolean, kotlin.Unit>): kotlin.Nothing declared in kotlinx.atomicfu' type=kotlin.Nothing origin=null
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Boolean
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: GET_VAR 'cur: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest.<anonymous>' type=kotlin.Boolean origin=null
                      ARG arg1: CONST Boolean type=kotlin.Boolean value=false
                    then: BLOCK type=kotlin.Unit origin=null
                      WHEN type=kotlin.Unit origin=IF
                        BRANCH
                          if: CALL 'public final fun compareAndSet (expect: kotlin.Boolean, update: kotlin.Boolean): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=null
                            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expect: CONST Boolean type=kotlin.Boolean value=false
                            ARG update: GET_VAR 'newValue: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=kotlin.Boolean origin=null
                          then: BLOCK type=kotlin.Unit origin=null
                            CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                              TYPE_ARG T: kotlin.Boolean
                              ARG expected: GET_VAR 'newValue: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=kotlin.Boolean origin=null
                              ARG actual: CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
                                ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                                  ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            RETURN type=kotlin.Nothing from='public final fun atomicfuBooleanLoopTest (newValue: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest'
                              CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
                                ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                                  ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun <set-value> (value: kotlin.Boolean): kotlin.Unit declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Unit origin=EQ
                        ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                        ARG value: CONST Boolean type=kotlin.Boolean value=false
    FUN name:atomicfuBooleanUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Boolean): kotlin.Unit declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Boolean type=kotlin.Boolean value=false
        VAR name:resBool type:kotlin.Boolean [val]
          CALL 'public final fun updateAndGet (<this>: kotlinx.atomicfu.AtomicBoolean, function: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Boolean declared in kotlinx.atomicfu' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest'
                    WHEN type=kotlin.Boolean origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
                          ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest.<anonymous>' type=kotlin.Boolean origin=null
                        then: BLOCK type=kotlin.Boolean origin=null
                          CALL 'public final fun compareAndSet (expect: kotlin.Boolean, update: kotlin.Boolean): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=null
                            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expect: CONST Boolean type=kotlin.Boolean value=false
                            ARG update: CONST Boolean type=kotlin.Boolean value=true
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Boolean origin=null
                          CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: GET_VAR 'val resBool: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=kotlin.Boolean origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuBooleanUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Boolean): kotlin.Unit declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun update (<this>: kotlinx.atomicfu.AtomicBoolean, function: kotlin.Function1<kotlin.Boolean, kotlin.Boolean>): kotlin.Unit declared in kotlinx.atomicfu' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Boolean, kotlin.Boolean> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Boolean
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Boolean
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateTest'
                  WHEN type=kotlin.Boolean origin=IF
                    BRANCH
                      if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
                        ARG <this>: GET_VAR 'value: kotlin.Boolean declared in <root>.LoopTest.atomicfuBooleanUpdateTest.<anonymous>' type=kotlin.Boolean origin=null
                      then: BLOCK type=kotlin.Boolean origin=null
                        CALL 'public final fun compareAndSet (expect: kotlin.Boolean, update: kotlin.Boolean): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=null
                          ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG expect: CONST Boolean type=kotlin.Boolean value=false
                          ARG update: CONST Boolean type=kotlin.Boolean value=true
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Boolean origin=null
                        CONST Boolean type=kotlin.Boolean value=true
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Boolean
          ARG expected: CONST Boolean type=kotlin.Boolean value=true
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Boolean declared in kotlinx.atomicfu.AtomicBoolean' type=kotlin.Boolean origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-b> (): kotlinx.atomicfu.AtomicBoolean declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicBoolean origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuBooleanUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=0
        VAR name:resInt type:kotlin.Int [val]
          CALL 'public final fun getAndUpdate (<this>: kotlinx.atomicfu.AtomicInt, function: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in kotlinx.atomicfu' type=kotlin.Int origin=null
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun incrementAndGet (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
                            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: GET_VAR 'val resInt: kotlin.Int declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntLoopTest visibility:public modality:FINAL returnType:kotlin.Int
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Int
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=0
        CALL 'public final fun loop (<this>: kotlinx.atomicfu.AtomicInt, action: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Nothing declared in kotlinx.atomicfu' type=kotlin.Nothing origin=null
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Int
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: GET_VAR 'cur: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest.<anonymous>' type=kotlin.Int origin=null
                      ARG arg1: CONST Int type=kotlin.Int value=10
                    then: BLOCK type=kotlin.Unit origin=null
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
                          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG expect: CONST Int type=kotlin.Int value=10
                          ARG update: GET_VAR 'newValue: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest' type=kotlin.Int origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.Int
                        ARG expected: GET_VAR 'newValue: kotlin.Int declared in <root>.LoopTest.atomicfuIntLoopTest' type=kotlin.Int origin=null
                        ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      RETURN type=kotlin.Nothing from='public final fun atomicfuIntLoopTest (newValue: kotlin.Int): kotlin.Int declared in <root>.LoopTest'
                        CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        CALL 'public final fun incrementAndGet (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
                          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=0
        VAR name:resInt type:kotlin.Int [val]
          CALL 'public final fun updateAndGet (<this>: kotlinx.atomicfu.AtomicInt, function: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Int declared in kotlinx.atomicfu' type=kotlin.Int origin=null
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest'
                    WHEN type=kotlin.Int origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest.<anonymous>' type=kotlin.Int origin=null
                          ARG arg1: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun incrementAndGet (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
                            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Int origin=null
                          CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
                            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
          ARG actual: GET_VAR 'val resInt: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=kotlin.Int origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuIntUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=0
        CALL 'public final fun update (<this>: kotlinx.atomicfu.AtomicInt, function: kotlin.Function1<kotlin.Int, kotlin.Int>): kotlin.Unit declared in kotlinx.atomicfu' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Int> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Int
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Int
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Int): kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateTest'
                  WHEN type=kotlin.Int origin=IF
                    BRANCH
                      if: CALL 'public final fun less (arg0: kotlin.Int, arg1: kotlin.Int): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                        ARG arg0: GET_VAR 'value: kotlin.Int declared in <root>.LoopTest.atomicfuIntUpdateTest.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=10
                      then: BLOCK type=kotlin.Int origin=null
                        CALL 'public final fun incrementAndGet (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
                          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Int origin=null
                        CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
                          ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Int declared in kotlin.Int.Companion' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Int.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuIntUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuLongGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Long): kotlin.Unit declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Long type=kotlin.Long value=0
        VAR name:resLong type:kotlin.Long [val]
          CALL 'public final fun getAndUpdate (<this>: kotlinx.atomicfu.AtomicLong, function: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in kotlinx.atomicfu' type=kotlin.Long origin=null
            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                            ARG <this>: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun incrementAndGet (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=null
                            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
                            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=10
          ARG actual: GET_VAR 'val resLong: kotlin.Long declared in <root>.LoopTest.atomicfuLongGetAndUpdateTest' type=kotlin.Long origin=null
    FUN name:atomicfuLongLoopTest visibility:public modality:FINAL returnType:kotlin.Long
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:kotlin.Long
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Long): kotlin.Unit declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Long type=kotlin.Long value=5000000000
        CALL 'public final fun loop (<this>: kotlinx.atomicfu.AtomicLong, action: kotlin.Function1<kotlin.Long, kotlin.Unit>): kotlin.Nothing declared in kotlinx.atomicfu' type=kotlin.Nothing origin=null
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:kotlin.Long
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: GET_VAR 'cur: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest.<anonymous>' type=kotlin.Long origin=null
                      ARG arg1: CONST Long type=kotlin.Long value=5000000010
                    then: BLOCK type=kotlin.Unit origin=null
                      WHEN type=kotlin.Unit origin=IF
                        BRANCH
                          if: CALL 'public final fun compareAndSet (expect: kotlin.Long, update: kotlin.Long): kotlin.Boolean declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Boolean origin=null
                            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG expect: CONST Long type=kotlin.Long value=5000000010
                            ARG update: GET_VAR 'newValue: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest' type=kotlin.Long origin=null
                          then: BLOCK type=kotlin.Unit origin=null
                            CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                              TYPE_ARG T: kotlin.Long
                              ARG expected: GET_VAR 'newValue: kotlin.Long declared in <root>.LoopTest.atomicfuLongLoopTest' type=kotlin.Long origin=null
                              ARG actual: CALL 'public final fun <get-value> (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=GET_PROPERTY
                                ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                                  ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            RETURN type=kotlin.Nothing from='public final fun atomicfuLongLoopTest (newValue: kotlin.Long): kotlin.Long declared in <root>.LoopTest'
                              CALL 'public final fun <get-value> (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=GET_PROPERTY
                                ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                                  ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        CALL 'public final fun incrementAndGet (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=null
                          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuLongUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Long): kotlin.Unit declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Long type=kotlin.Long value=0
        VAR name:resLong type:kotlin.Long [val]
          CALL 'public final fun updateAndGet (<this>: kotlinx.atomicfu.AtomicLong, function: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Long declared in kotlinx.atomicfu' type=kotlin.Long origin=null
            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
                VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest'
                    WHEN type=kotlin.Long origin=IF
                      BRANCH
                        if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                          ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest.<anonymous>' type=kotlin.Long origin=null
                          ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                            ARG <this>: CONST Int type=kotlin.Int value=10
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun incrementAndGet (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=null
                            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=kotlin.Long origin=null
                          CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
                            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
          ARG actual: GET_VAR 'val resLong: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateAndGetTest' type=kotlin.Long origin=null
    FUN name:atomicfuLongUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Long): kotlin.Unit declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Long type=kotlin.Long value=0
        CALL 'public final fun update (<this>: kotlinx.atomicfu.AtomicLong, function: kotlin.Function1<kotlin.Long, kotlin.Long>): kotlin.Unit declared in kotlinx.atomicfu' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG function: FUN_EXPR type=kotlin.Function1<kotlin.Long, kotlin.Long> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Long
              VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.Long
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: kotlin.Long): kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateTest'
                  WHEN type=kotlin.Long origin=IF
                    BRANCH
                      if: CALL 'public final fun less (arg0: kotlin.Long, arg1: kotlin.Long): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=LT
                        ARG arg0: GET_VAR 'value: kotlin.Long declared in <root>.LoopTest.atomicfuLongUpdateTest.<anonymous>' type=kotlin.Long origin=null
                        ARG arg1: CALL 'public open fun toLong (): kotlin.Long declared in kotlin.Int' type=kotlin.Long origin=null
                          ARG <this>: CONST Int type=kotlin.Int value=10
                      then: BLOCK type=kotlin.Long origin=null
                        CALL 'public final fun incrementAndGet (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=null
                          ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=kotlin.Long origin=null
                        CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
                          ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CALL 'public final fun <get-MAX_VALUE> (): kotlin.Long declared in kotlin.Long.Companion' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Companion modality:FINAL visibility:public [companion] superTypes:[kotlin.Any]' type=kotlin.Long.Companion
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Long declared in kotlinx.atomicfu.AtomicLong' type=kotlin.Long origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-l> (): kotlinx.atomicfu.AtomicLong declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicLong origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLongUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuLoopTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=777
          ARG actual: CALL 'public final fun atomicfuIntLoopTest (newValue: kotlin.Int): kotlin.Int declared in <root>.LoopTest' type=kotlin.Int origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Int type=kotlin.Int value=777
        CALL 'public final fun assertFalse (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun atomicfuBooleanLoopTest (newValue: kotlin.Boolean): kotlin.Boolean declared in <root>.LoopTest' type=kotlin.Boolean origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Boolean type=kotlin.Boolean value=false
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Long
          ARG expected: CONST Long type=kotlin.Long value=9000000000
          ARG actual: CALL 'public final fun atomicfuLongLoopTest (newValue: kotlin.Long): kotlin.Long declared in <root>.LoopTest' type=kotlin.Long origin=null
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG newValue: CONST Long type=kotlin.Long value=9000000000
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="bbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun atomicfuRefLoopTest (newValue: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest' type=<root>.LoopTest.A origin=null
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
              ARG newValue: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                ARG s: CONST String type=kotlin.String value="bbbb"
    FUN name:atomicfuRefGetAndUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun lazySet (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        VAR name:resRef type:<root>.LoopTest.A [val]
          CALL 'public final fun getAndUpdate <T> (<this>: kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.getAndUpdate>, function: kotlin.Function1<T of kotlinx.atomicfu.getAndUpdate, T of kotlinx.atomicfu.getAndUpdate>): T of kotlinx.atomicfu.getAndUpdate declared in kotlinx.atomicfu' type=<root>.LoopTest.A origin=null
            TYPE_ARG T: <root>.LoopTest.A
            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
                VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest'
                    WHEN type=<root>.LoopTest.A origin=IF
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                            ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG arg1: CONST String type=kotlin.String value="aaaa"
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CALL 'public final fun <set-value> (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=EQ
                            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                              ARG s: CONST String type=kotlin.String value="bbbb"
                          CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
                            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: STRING_CONCATENATION type=kotlin.String
                              CONST String type=kotlin.String value="cccc"
                              CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                                ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="bbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: GET_VAR 'val resRef: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
              ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefGetAndUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuRefLoopTest visibility:public modality:FINAL returnType:<root>.LoopTest.A
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      VALUE_PARAMETER kind:Regular name:newValue index:1 type:<root>.LoopTest.A
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaa"
        CALL 'public final fun loop <T> (<this>: kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.loop>, action: kotlin.Function1<T of kotlinx.atomicfu.loop, kotlin.Unit>): kotlin.Nothing declared in kotlinx.atomicfu' type=kotlin.Nothing origin=null
          TYPE_ARG T: <root>.LoopTest.A
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG action: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, kotlin.Unit> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
              VALUE_PARAMETER kind:Regular name:cur index:0 type:<root>.LoopTest.A
              BLOCK_BODY
                WHEN type=kotlin.Unit origin=IF
                  BRANCH
                    if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                      ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                        ARG <this>: GET_VAR 'cur: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest.<anonymous>' type=<root>.LoopTest.A origin=null
                      ARG arg1: CONST String type=kotlin.String value="bbb"
                    then: BLOCK type=kotlin.Unit origin=null
                      TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
                        CALL 'public final fun compareAndSet (expect: T of kotlinx.atomicfu.AtomicRef, update: T of kotlinx.atomicfu.AtomicRef): kotlin.Boolean declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Boolean origin=null
                          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG expect: GET_VAR 'cur: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG update: GET_VAR 'newValue: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest.A origin=null
                      CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
                        TYPE_ARG T: kotlin.String
                        ARG expected: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: GET_VAR 'newValue: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest.A origin=null
                        ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
                            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      RETURN type=kotlin.Nothing from='public final fun atomicfuRefLoopTest (newValue: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest'
                        CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
                          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                  BRANCH
                    if: CONST Boolean type=kotlin.Boolean value=true
                    then: BLOCK type=kotlin.Unit origin=null
                      CALL 'public final fun <set-value> (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=EQ
                        ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefLoopTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                        ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                          ARG s: CONST String type=kotlin.String value="bbb"
    FUN name:atomicfuRefUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun lazySet (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        VAR name:resRef type:<root>.LoopTest.A [val]
          CALL 'public final fun updateAndGet <T> (<this>: kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.updateAndGet>, function: kotlin.Function1<T of kotlinx.atomicfu.updateAndGet, T of kotlinx.atomicfu.updateAndGet>): T of kotlinx.atomicfu.updateAndGet declared in kotlinx.atomicfu' type=<root>.LoopTest.A origin=null
            TYPE_ARG T: <root>.LoopTest.A
            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
            ARG function: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
              FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
                VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
                BLOCK_BODY
                  RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest'
                    WHEN type=<root>.LoopTest.A origin=IF
                      BRANCH
                        if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                          ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                            ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest.<anonymous>' type=<root>.LoopTest.A origin=null
                          ARG arg1: CONST String type=kotlin.String value="aaaa"
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CALL 'public final fun <set-value> (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=EQ
                            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                            ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                              ARG s: CONST String type=kotlin.String value="bbbb"
                          CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
                            ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                      BRANCH
                        if: CONST Boolean type=kotlin.Boolean value=true
                        then: BLOCK type=<root>.LoopTest.A origin=null
                          CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: STRING_CONCATENATION type=kotlin.String
                              CONST String type=kotlin.String value="cccc"
                              CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                                ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: GET_VAR 'val resRef: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
              ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuRefUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun lazySet (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
            ARG s: CONST String type=kotlin.String value="aaaa"
        CALL 'public final fun update <T> (<this>: kotlinx.atomicfu.AtomicRef<T of kotlinx.atomicfu.update>, function: kotlin.Function1<T of kotlinx.atomicfu.update, T of kotlinx.atomicfu.update>): kotlin.Unit declared in kotlinx.atomicfu' type=kotlin.Unit origin=null
          TYPE_ARG T: <root>.LoopTest.A
          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
          ARG function: FUN_EXPR type=kotlin.Function1<<root>.LoopTest.A, <root>.LoopTest.A> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:<root>.LoopTest.A
              VALUE_PARAMETER kind:Regular name:value index:0 type:<root>.LoopTest.A
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (value: <root>.LoopTest.A): <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest'
                  WHEN type=<root>.LoopTest.A origin=IF
                    BRANCH
                      if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                          ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
                        ARG arg1: CONST String type=kotlin.String value="aaaa"
                      then: BLOCK type=<root>.LoopTest.A origin=null
                        CALL 'public final fun <set-value> (value: T of kotlinx.atomicfu.AtomicRef): kotlin.Unit declared in kotlinx.atomicfu.AtomicRef' type=kotlin.Unit origin=EQ
                          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                          ARG value: CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                            ARG s: CONST String type=kotlin.String value="bbbb"
                        CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
                          ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                            ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
                    BRANCH
                      if: CONST Boolean type=kotlin.Boolean value=true
                      then: BLOCK type=<root>.LoopTest.A origin=null
                        CONSTRUCTOR_CALL 'public constructor <init> (s: kotlin.String) declared in <root>.LoopTest.A' type=<root>.LoopTest.A origin=null
                          ARG s: STRING_CONCATENATION type=kotlin.String
                            CONST String type=kotlin.String value="cccc"
                            CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
                              ARG <this>: GET_VAR 'value: <root>.LoopTest.A declared in <root>.LoopTest.atomicfuRefUpdateTest.<anonymous>' type=<root>.LoopTest.A origin=null
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="ccccbbbb"
          ARG actual: CALL 'public final fun <get-s> (): kotlin.String declared in <root>.LoopTest.A' type=kotlin.String origin=GET_PROPERTY
            ARG <this>: CALL 'public final fun <get-value> (): T of kotlinx.atomicfu.AtomicRef declared in kotlinx.atomicfu.AtomicRef' type=<root>.LoopTest.A origin=GET_PROPERTY
              ARG <this>: CALL 'private final fun <get-r> (): kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> declared in <root>.LoopTest' type=kotlinx.atomicfu.AtomicRef<<root>.LoopTest.A> origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuRefUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuUpdateAndGetTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateAndGetTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
    FUN name:atomicfuUpdateTest visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.LoopTest
      BLOCK_BODY
        CALL 'public final fun atomicfuIntUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuBooleanUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuLongUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun atomicfuRefUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.LoopTest declared in <root>.LoopTest.atomicfuUpdateTest' type=<root>.LoopTest origin=IMPLICIT_ARGUMENT
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.LoopTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.LoopTest' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuLoopTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuUpdateAndGetTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      CALL 'public final fun atomicfuGetAndUpdateTest (): kotlin.Unit declared in <root>.LoopTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.LoopTest declared in <root>.box' type=<root>.LoopTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
