private val topLevelS: AtomicRef<Any>
  field = atomic<Any>(initial = arrayOf<String>(elements = ["A", "B"]))
  private get

class UncheckedCastTest {
  private val s: AtomicRef<Any>
    field = atomic<Any>(initial = "AAA")
    private get

  private val bs: AtomicRef<Any?>
    field = atomic<Any?>(initial = null)
    private get

  private val a: AtomicArray<Any?>
    field = atomicArrayOfNulls<Any?>(size = 10)
    private get

  private data class Box {
    val b: Int
      field = b
      get

    constructor(b: Int) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    operator fun component1(): Int {
      return <this>.#b
    }

    fun copy(b: Int = <this>.#b): Box {
      return Box(b = b)
    }

    override operator fun equals(other: Any?): Boolean {
      when {
        EQEQEQ(arg0 = <this>, arg1 = other) -> return true
      }
      when {
        other !is Box -> return false
      }
      val tmp_0: Box = other as Box
      when {
        EQEQ(arg0 = <this>.#b, arg1 = tmp_0.#b).not() -> return false
      }
      return true
    }

    override fun hashCode(): Int {
      return <this>.#b.hashCode()
    }

    override fun toString(): String {
      return "Box(" + "b=" + <this>.#b + ")"
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  @Suppress(names = ["NOTHING_TO_INLINE", "UNCHECKED_CAST"])
  private inline fun <T : Any?> AtomicRef<T>.getString(): String {
    return <this> as AtomicRef<String>.<get-value>()
  }

  fun testArrayValueUncheckedCast() {
    <this>.<get-a>().get(index = 0).<set-value>(value = "OK")
    assertEquals<String>(expected = "OK", actual = <this>.<get-a>().get(index = 0) as AtomicRef<String>.<get-value>())
  }

  fun testArrayValueUncheckedCastInlineFunc() {
    <this>.<get-a>().get(index = 0).<set-value>(value = "OK")
    assertEquals<String>(expected = "OK", actual = <this>.getString<Any?>(/* <this> = <this>.<get-a>().get(index = 0) */))
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastGetAndUpdate() {
    <this>.<get-bs>().lazySet(value = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    val res: Array<Array<Box>> = getAndUpdate<Array<Array<Box>>>(/* <this> = <this>.<get-bs>() as AtomicRef<Array<Array<Box>>>, */ function = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<Box>(arg0 = res as Array<Array<Box>>.get(index = 0).get(index = 1)).<get-b>())
    assertEquals<Int>(expected = 5, actual = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-bs>() /*as AtomicRef<Array<Array<Box>>> */.<get-value>().get(index = 0).get(index = 1)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastUpdate() {
    <this>.<get-bs>().lazySet(value = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    update<Array<Array<Box>>>(/* <this> = <this>.<get-bs>() as AtomicRef<Array<Array<Box>>>, */ function = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 5, actual = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-bs>() /*as AtomicRef<Array<Array<Box>>> */.<get-value>().get(index = 0).get(index = 1)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicRefUncheckedCastUpdateAndGet() {
    <this>.<get-bs>().lazySet(value = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)]), arrayOf<Box>(elements = [Box(b = 3)])]))
    assertEquals<Int>(expected = 2, actual = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-bs>() as AtomicRef<Array<Array<Box>>>.<get-value>().get(index = 0).get(index = 1)).<get-b>())
    val res: Array<Array<Box>> = updateAndGet<Array<Array<Box>>>(/* <this> = <this>.<get-bs>() as AtomicRef<Array<Array<Box>>>, */ function = local fun <anonymous>(it: Array<Array<Box>>): Array<Array<Box>> {
      return arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 4), Box(b = 5)]), arrayOf<Box>(elements = [Box(b = 6)])])
    }
)
    assertEquals<Int>(expected = 6, actual = CHECK_NOT_NULL<Box>(arg0 = res as Array<Array<Box>>.get(index = 1).get(index = 0)).<get-b>())
    assertEquals<Int>(expected = 6, actual = CHECK_NOT_NULL<Box>(arg0 = <this>.<get-bs>() /*as AtomicRef<Array<Array<Box>>> */.<get-value>().get(index = 1).get(index = 0)).<get-b>())
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testAtomicValUncheckedCast() {
    assertEquals<String>(expected = <this>.<get-s>() as AtomicRef<String>.<get-value>(), actual = "AAA")
    <this>.<get-bs>().lazySet(value = arrayOf<Array<Box>>(elements = [arrayOf<Box>(elements = [Box(b = 1), Box(b = 2)])]))
    assertEquals<Int>(expected = CHECK_NOT_NULL<Array<Box>>(arg0 = <this>.<get-bs>() as AtomicRef<Array<Array<Box>>>.<get-value>().get(index = 0)).get(index = 0).<get-b>().times(other = 10), actual = 10)
  }

  fun testInlineFunc() {
    assertEquals<String>(expected = "AAA", actual = <this>.getString<Any>(/* <this> = <this>.<get-s>() */))
  }

  @Suppress(names = ["UNCHECKED_CAST"])
  fun testTopLevelValUnchekedCast() {
    assertEquals<String>(expected = "B", actual = <get-topLevelS>() as AtomicRef<Array<String>>.<get-value>().get(index = 1))
  }

}

fun box(): String {
  val testClass: UncheckedCastTest = UncheckedCastTest()
  testClass.testAtomicValUncheckedCast()
  testClass.testTopLevelValUnchekedCast()
  testClass.testArrayValueUncheckedCast()
  testClass.testArrayValueUncheckedCastInlineFunc()
  testClass.testInlineFunc()
  testClass.testAtomicRefUncheckedCastUpdate()
  testClass.testAtomicRefUncheckedCastGetAndUpdate()
  testClass.testAtomicRefUncheckedCastUpdateAndGet()
  return "OK"
}
