FILE fqName:<root> fileName:/SimpleLockTest.kt
  CLASS CLASS name:SimpleLock modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.SimpleLock
    PROPERTY name:_locked visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:_locked type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=0
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-_locked> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
        correspondingProperty: PROPERTY name:_locked visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-_locked> (): kotlinx.atomicfu.AtomicInt declared in <root>.SimpleLock'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:_locked type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.<get-_locked>' type=<root>.SimpleLock origin=null
    CONSTRUCTOR visibility:public returnType:<root>.SimpleLock [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:SimpleLock modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:withLock visibility:public modality:FINAL returnType:T of <root>.SimpleLock.withLock
      TYPE_PARAMETER name:T index:0 variance: superTypes:[kotlin.Any?] reified:false
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLock
      VALUE_PARAMETER kind:Regular name:res index:1 type:T of <root>.SimpleLock.withLock
      BLOCK_BODY
        TRY type=kotlin.Unit
          try: BLOCK type=kotlin.Unit origin=null
            CALL 'public final fun loop (<this>: kotlinx.atomicfu.AtomicInt, action: kotlin.Function1<kotlin.Int, kotlin.Unit>): kotlin.Nothing declared in kotlinx.atomicfu' type=kotlin.Nothing origin=null
              ARG <this>: CALL 'private final fun <get-_locked> (): kotlinx.atomicfu.AtomicInt declared in <root>.SimpleLock' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
              ARG action: FUN_EXPR type=kotlin.Function1<kotlin.Int, kotlin.Unit> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Unit
                  VALUE_PARAMETER kind:Regular name:locked index:0 type:kotlin.Int
                  BLOCK_BODY
                    CALL 'public final fun check (value: kotlin.Boolean): kotlin.Unit declared in kotlin' type=kotlin.Unit origin=null
                      ARG value: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                        ARG arg0: GET_VAR 'locked: kotlin.Int declared in <root>.SimpleLock.withLock.<anonymous>' type=kotlin.Int origin=null
                        ARG arg1: CONST Int type=kotlin.Int value=0
                    WHEN type=kotlin.Unit origin=IF
                      BRANCH
                        if: CALL 'public final fun not (): kotlin.Boolean declared in kotlin.Boolean' type=kotlin.Boolean origin=EXCL
                          ARG <this>: CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
                            ARG <this>: CALL 'private final fun <get-_locked> (): kotlinx.atomicfu.AtomicInt declared in <root>.SimpleLock' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                              ARG <this>: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
                            ARG expect: CONST Int type=kotlin.Int value=0
                            ARG update: CONST Int type=kotlin.Int value=1
                        then: RETURN type=kotlin.Nothing from='local final fun <anonymous> (locked: kotlin.Int): kotlin.Unit declared in <root>.SimpleLock.withLock'
                          GET_OBJECT 'CLASS IR_EXTERNAL_DECLARATION_STUB OBJECT name:Unit modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
                    RETURN type=kotlin.Nothing from='public final fun withLock <T> (res: T of <root>.SimpleLock.withLock): T of <root>.SimpleLock.withLock declared in <root>.SimpleLock'
                      GET_VAR 'res: T of <root>.SimpleLock.withLock declared in <root>.SimpleLock.withLock' type=T of <root>.SimpleLock.withLock origin=null
          finally: BLOCK type=kotlin.Unit origin=null
            CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
              ARG <this>: CALL 'private final fun <get-_locked> (): kotlinx.atomicfu.AtomicInt declared in <root>.SimpleLock' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.SimpleLock declared in <root>.SimpleLock.withLock' type=<root>.SimpleLock origin=IMPLICIT_ARGUMENT
              ARG value: CONST Int type=kotlin.Int value=0
  CLASS CLASS name:SimpleLockTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.SimpleLockTest
    CONSTRUCTOR visibility:public returnType:<root>.SimpleLockTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:SimpleLockTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:withLock visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.SimpleLockTest
      BLOCK_BODY
        VAR name:lock type:<root>.SimpleLock [val]
          CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.SimpleLock' type=<root>.SimpleLock origin=null
        VAR name:res type:kotlin.String [val]
          CALL 'public final fun withLock <T> (res: T of <root>.SimpleLock.withLock): T of <root>.SimpleLock.withLock declared in <root>.SimpleLock' type=kotlin.String origin=null
            TYPE_ARG T: kotlin.String
            ARG <this>: GET_VAR 'val lock: <root>.SimpleLock declared in <root>.SimpleLockTest.withLock' type=<root>.SimpleLock origin=null
            ARG res: CONST String type=kotlin.String value="OK"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.String
          ARG expected: CONST String type=kotlin.String value="OK"
          ARG actual: GET_VAR 'val res: kotlin.String declared in <root>.SimpleLockTest.withLock' type=kotlin.String origin=null
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      VAR name:testClass type:<root>.SimpleLockTest [val]
        CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.SimpleLockTest' type=<root>.SimpleLockTest origin=null
      CALL 'public final fun withLock (): kotlin.Unit declared in <root>.SimpleLockTest' type=kotlin.Unit origin=null
        ARG <this>: GET_VAR 'val testClass: <root>.SimpleLockTest declared in <root>.box' type=<root>.SimpleLockTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
