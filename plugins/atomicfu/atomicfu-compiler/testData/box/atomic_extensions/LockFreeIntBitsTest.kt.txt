class LockFreeIntBits {
  private val bits: AtomicInt
    field = atomic(initial = 0)
    private get

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun bitClear(index: Int): Boolean {
    val mask: Int = <this>.mask(/* <this> = index */)
    return <this>.bitUpdate(check = local fun <anonymous>(it: Int): Boolean {
      return EQEQ(arg0 = it.and(other = mask), arg1 = 0)
    }
, upd = local fun <anonymous>(it: Int): Int {
      return it.and(other = mask.inv())
    }
)
  }

  fun bitSet(index: Int): Boolean {
    val mask: Int = <this>.mask(/* <this> = index */)
    return <this>.bitUpdate(check = local fun <anonymous>(it: Int): Boolean {
      return EQEQ(arg0 = it.and(other = mask), arg1 = 0).not()
    }
, upd = local fun <anonymous>(it: Int): Int {
      return it.or(other = mask)
    }
)
  }

  private inline fun bitUpdate(check: Function1<Int, Boolean>, upd: Function1<Int, Int>): Boolean {
    update(/* <this> = <this>.<get-bits>(), */ function = local fun <anonymous>(it: Int): Int {
      when {
        check.invoke(p1 = it) -> return false
      }
      return upd.invoke(p1 = it)
    }
)
    return true
  }

  operator fun get(index: Int): Boolean {
    return EQEQ(arg0 = <this>.<get-bits>().<get-value>().and(other = <this>.mask(/* <this> = index */)), arg1 = 0).not()
  }

  private fun Int.mask(): Int {
    return 1.shl(bitCount = <this>)
  }

}

class LockFreeIntBitsTest {
  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  fun testBasic() {
    val bs: LockFreeIntBits = LockFreeIntBits()
    assertTrue(actual = bs.get(index = 0).not())
    assertTrue(actual = bs.bitSet(index = 0))
    assertTrue(actual = bs.get(index = 0))
    assertTrue(actual = bs.bitSet(index = 0).not())
    assertTrue(actual = bs.get(index = 1).not())
    assertTrue(actual = bs.bitSet(index = 1))
    assertTrue(actual = bs.get(index = 1))
    assertTrue(actual = bs.bitSet(index = 1).not())
    assertTrue(actual = bs.bitSet(index = 0).not())
    assertTrue(actual = bs.get(index = 0))
    assertTrue(actual = bs.bitClear(index = 0))
    assertTrue(actual = bs.bitClear(index = 0).not())
    assertTrue(actual = bs.get(index = 1))
  }

}

fun box(): String {
  val testClass: LockFreeIntBitsTest = LockFreeIntBitsTest()
  testClass.testBasic()
  return "OK"
}
