FILE fqName:<root> fileName:/TraceTest.kt
  CLASS CLASS name:TraceTest modality:FINAL visibility:public superTypes:[kotlin.Any]
    thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.TraceTest
    PROPERTY name:defaultTrace visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:defaultTrace type:kotlinx.atomicfu.TraceBase visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun Trace (size: kotlin.Int, format: kotlinx.atomicfu.TraceFormat): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-defaultTrace> visibility:private modality:FINAL returnType:kotlinx.atomicfu.TraceBase
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:defaultTrace visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:defaultTrace type:kotlinx.atomicfu.TraceBase visibility:private [final]' type=kotlinx.atomicfu.TraceBase origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-defaultTrace>' type=<root>.TraceTest origin=null
    PROPERTY name:a1 visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int, trace: kotlinx.atomicfu.TraceBase): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=5
            ARG trace: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a1> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:a1 visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a1 type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a1>' type=<root>.TraceTest origin=null
    PROPERTY name:traceWithSize visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:traceWithSize type:kotlinx.atomicfu.TraceBase visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun Trace (size: kotlin.Int, format: kotlinx.atomicfu.TraceFormat): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
            ARG size: CONST Int type=kotlin.Int value=30
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-traceWithSize> visibility:private modality:FINAL returnType:kotlinx.atomicfu.TraceBase
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:traceWithSize visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:traceWithSize type:kotlinx.atomicfu.TraceBase visibility:private [final]' type=kotlinx.atomicfu.TraceBase origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-traceWithSize>' type=<root>.TraceTest origin=null
    PROPERTY name:a2 visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int, trace: kotlinx.atomicfu.TraceBase): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=1
            ARG trace: CALL 'private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a2> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:a2 visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a2 type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a2>' type=<root>.TraceTest origin=null
    PROPERTY name:traceWithFormat visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:traceWithFormat type:kotlinx.atomicfu.TraceBase visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun Trace (size: kotlin.Int, format: kotlinx.atomicfu.TraceFormat): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
            ARG format: CALL 'public final fun TraceFormat (format: kotlin.Function2<@[ParameterName(name = "index")] kotlin.Int, @[ParameterName(name = "event")] kotlin.Any, kotlin.String>): kotlinx.atomicfu.TraceFormat declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceFormat origin=null
              ARG format: FUN_EXPR type=kotlin.Function2<@[ParameterName(name = "index")] kotlin.Int, @[ParameterName(name = "event")] kotlin.Any, kotlin.String> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.String
                  VALUE_PARAMETER kind:Regular name:i index:0 type:kotlin.Int
                  VALUE_PARAMETER kind:Regular name:text index:1 type:kotlin.Any
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='local final fun <anonymous> (i: kotlin.Int, text: kotlin.Any): kotlin.String declared in <root>.TraceTest.traceWithFormat'
                      STRING_CONCATENATION type=kotlin.String
                        CONST String type=kotlin.String value="["
                        GET_VAR 'i: kotlin.Int declared in <root>.TraceTest.traceWithFormat.<anonymous>' type=kotlin.Int origin=null
                        CONST String type=kotlin.String value=": "
                        GET_VAR 'text: kotlin.Any declared in <root>.TraceTest.traceWithFormat.<anonymous>' type=kotlin.Any origin=null
                        CONST String type=kotlin.String value="]"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-traceWithFormat> visibility:private modality:FINAL returnType:kotlinx.atomicfu.TraceBase
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:traceWithFormat visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:traceWithFormat type:kotlinx.atomicfu.TraceBase visibility:private [final]' type=kotlinx.atomicfu.TraceBase origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-traceWithFormat>' type=<root>.TraceTest origin=null
    PROPERTY name:a visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int, trace: kotlinx.atomicfu.TraceBase): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=0
            ARG trace: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:a visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a>' type=<root>.TraceTest origin=null
    PROPERTY name:traceWithSizeAndFormat visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:traceWithSizeAndFormat type:kotlinx.atomicfu.TraceBase visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun Trace (size: kotlin.Int, format: kotlinx.atomicfu.TraceFormat): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
            ARG size: CONST Int type=kotlin.Int value=30
            ARG format: CALL 'public final fun TraceFormat (format: kotlin.Function2<@[ParameterName(name = "index")] kotlin.Int, @[ParameterName(name = "event")] kotlin.Any, kotlin.String>): kotlinx.atomicfu.TraceFormat declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceFormat origin=null
              ARG format: FUN_EXPR type=kotlin.Function2<@[ParameterName(name = "index")] kotlin.Int, @[ParameterName(name = "event")] kotlin.Any, kotlin.String> origin=LAMBDA
                FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.String
                  VALUE_PARAMETER kind:Regular name:id index:0 type:kotlin.Int
                  VALUE_PARAMETER kind:Regular name:text index:1 type:kotlin.Any
                  BLOCK_BODY
                    RETURN type=kotlin.Nothing from='local final fun <anonymous> (id: kotlin.Int, text: kotlin.Any): kotlin.String declared in <root>.TraceTest.traceWithSizeAndFormat'
                      STRING_CONCATENATION type=kotlin.String
                        GET_VAR 'id: kotlin.Int declared in <root>.TraceTest.traceWithSizeAndFormat.<anonymous>' type=kotlin.Int origin=null
                        CONST String type=kotlin.String value=": "
                        GET_VAR 'text: kotlin.Any declared in <root>.TraceTest.traceWithSizeAndFormat.<anonymous>' type=kotlin.Any origin=null
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-traceWithSizeAndFormat> visibility:private modality:FINAL returnType:kotlinx.atomicfu.TraceBase
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:traceWithSizeAndFormat visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-traceWithSizeAndFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:traceWithSizeAndFormat type:kotlinx.atomicfu.TraceBase visibility:private [final]' type=kotlinx.atomicfu.TraceBase origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-traceWithSizeAndFormat>' type=<root>.TraceTest origin=null
    PROPERTY name:a3 visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:a3 type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=2
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-a3> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:a3 visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:a3 type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-a3>' type=<root>.TraceTest origin=null
    PROPERTY name:shortTrace visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:shortTrace type:kotlinx.atomicfu.TraceBase visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun Trace (size: kotlin.Int, format: kotlinx.atomicfu.TraceFormat): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
            ARG size: CONST Int type=kotlin.Int value=4
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-shortTrace> visibility:private modality:FINAL returnType:kotlinx.atomicfu.TraceBase
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:shortTrace visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-shortTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:shortTrace type:kotlinx.atomicfu.TraceBase visibility:private [final]' type=kotlinx.atomicfu.TraceBase origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-shortTrace>' type=<root>.TraceTest origin=null
    PROPERTY name:s visibility:private modality:FINAL [val]
      FIELD PROPERTY_BACKING_FIELD name:s type:kotlinx.atomicfu.AtomicInt visibility:private [final]
        EXPRESSION_BODY
          CALL 'public final fun atomic (initial: kotlin.Int, trace: kotlinx.atomicfu.TraceBase): kotlinx.atomicfu.AtomicInt declared in kotlinx.atomicfu' type=kotlinx.atomicfu.AtomicInt origin=null
            ARG initial: CONST Int type=kotlin.Int value=0
            ARG trace: CALL 'public final fun named (<this>: kotlinx.atomicfu.TraceBase, name: kotlin.String): kotlinx.atomicfu.TraceBase declared in kotlinx.atomicfu' type=kotlinx.atomicfu.TraceBase origin=null
              ARG <this>: CALL 'private final fun <get-shortTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
                ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
              ARG name: CONST String type=kotlin.String value="s"
      FUN DEFAULT_PROPERTY_ACCESSOR name:<get-s> visibility:private modality:FINAL returnType:kotlinx.atomicfu.AtomicInt
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
        correspondingProperty: PROPERTY name:s visibility:private modality:FINAL [val]
        BLOCK_BODY
          RETURN type=kotlin.Nothing from='private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest'
            GET_FIELD 'FIELD PROPERTY_BACKING_FIELD name:s type:kotlinx.atomicfu.AtomicInt visibility:private [final]' type=kotlinx.atomicfu.AtomicInt origin=null
              receiver: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.<get-s>' type=<root>.TraceTest origin=null
    CLASS ENUM_CLASS name:Status modality:FINAL visibility:private superTypes:[kotlin.Enum<<root>.TraceTest.Status>]
      thisReceiver: VALUE_PARAMETER INSTANCE_RECEIVER kind:DispatchReceiver name:<this> type:<root>.TraceTest.Status
      ENUM_ENTRY name:START
        init: EXPRESSION_BODY
          ENUM_CONSTRUCTOR_CALL 'private constructor <init> () declared in <root>.TraceTest.Status'
      ENUM_ENTRY name:END
        init: EXPRESSION_BODY
          ENUM_CONSTRUCTOR_CALL 'private constructor <init> () declared in <root>.TraceTest.Status'
      CONSTRUCTOR visibility:private returnType:<root>.TraceTest.Status [primary]
        BLOCK_BODY
          ENUM_CONSTRUCTOR_CALL 'public constructor <init> (name: kotlin.String, ordinal: kotlin.Int) declared in kotlin.Enum'
            TYPE_ARG E: <root>.TraceTest.Status
          INSTANCE_INITIALIZER_CALL classDescriptor='CLASS ENUM_CLASS name:Status modality:FINAL visibility:private superTypes:[kotlin.Enum<<root>.TraceTest.Status>]' type=kotlin.Unit
      FUN ENUM_CLASS_SPECIAL_MEMBER name:valueOf visibility:public modality:FINAL returnType:<root>.TraceTest.Status
        VALUE_PARAMETER kind:Regular name:value index:0 type:kotlin.String
        SYNTHETIC_BODY kind=ENUM_VALUEOF
      FUN ENUM_CLASS_SPECIAL_MEMBER name:values visibility:public modality:FINAL returnType:kotlin.Array<<root>.TraceTest.Status>
        SYNTHETIC_BODY kind=ENUM_VALUES
      FUN FAKE_OVERRIDE name:compareTo visibility:public modality:FINAL returnType:kotlin.Int [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        VALUE_PARAMETER kind:Regular name:other index:1 type:<root>.TraceTest.Status
        overridden:
          public final fun compareTo (other: E of kotlin.Enum): kotlin.Int declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:equals visibility:public modality:FINAL returnType:kotlin.Boolean [fake_override,operator]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
        overridden:
          public final fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:hashCode visibility:public modality:FINAL returnType:kotlin.Int [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        overridden:
          public final fun hashCode (): kotlin.Int declared in kotlin.Enum
      FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
        VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
        overridden:
          public open fun toString (): kotlin.String declared in kotlin.Enum
      PROPERTY ENUM_CLASS_SPECIAL_MEMBER name:entries visibility:public modality:FINAL [val]
        FUN ENUM_CLASS_SPECIAL_MEMBER name:<get-entries> visibility:public modality:FINAL returnType:kotlin.enums.EnumEntries<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY ENUM_CLASS_SPECIAL_MEMBER name:entries visibility:public modality:FINAL [val]
          SYNTHETIC_BODY kind=ENUM_ENTRIES
      PROPERTY FAKE_OVERRIDE name:name visibility:public modality:FINAL [fake_override,val]
        annotations:
          IntrinsicConstEvaluation
        overridden:
          public final name: kotlin.String declared in kotlin.Enum
        FUN FAKE_OVERRIDE name:<get-name> visibility:public modality:FINAL returnType:kotlin.String [fake_override]
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY FAKE_OVERRIDE name:name visibility:public modality:FINAL [fake_override,val]
          overridden:
            public final fun <get-name> (): kotlin.String declared in kotlin.Enum
      PROPERTY FAKE_OVERRIDE name:ordinal visibility:public modality:FINAL [fake_override,val]
        overridden:
          public final ordinal: kotlin.Int declared in kotlin.Enum
        FUN FAKE_OVERRIDE name:<get-ordinal> visibility:public modality:FINAL returnType:kotlin.Int [fake_override]
          VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Enum<<root>.TraceTest.Status>
          correspondingProperty: PROPERTY FAKE_OVERRIDE name:ordinal visibility:public modality:FINAL [fake_override,val]
          overridden:
            public final fun <get-ordinal> (): kotlin.Int declared in kotlin.Enum
    CONSTRUCTOR visibility:public returnType:<root>.TraceTest [primary]
      BLOCK_BODY
        DELEGATING_CONSTRUCTOR_CALL 'public constructor <init> () declared in kotlin.Any'
        INSTANCE_INITIALIZER_CALL classDescriptor='CLASS CLASS name:TraceTest modality:FINAL visibility:public superTypes:[kotlin.Any]' type=kotlin.Unit
    FUN FAKE_OVERRIDE name:equals visibility:public modality:OPEN returnType:kotlin.Boolean [fake_override,operator]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      VALUE_PARAMETER kind:Regular name:other index:1 type:kotlin.Any?
      overridden:
        public open fun equals (other: kotlin.Any?): kotlin.Boolean declared in kotlin.Any
    FUN FAKE_OVERRIDE name:hashCode visibility:public modality:OPEN returnType:kotlin.Int [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun hashCode (): kotlin.Int declared in kotlin.Any
    FUN FAKE_OVERRIDE name:toString visibility:public modality:OPEN returnType:kotlin.String [fake_override]
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:kotlin.Any
      overridden:
        public open fun toString (): kotlin.String declared in kotlin.Any
    FUN name:test visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'public final fun testDefaultTrace (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceWithSize (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceWithFormat (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testNamedTrace (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testMultipleAppend (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun testTraceInBlock (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
          ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.test' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testDefaultTrace visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testDefaultTrace'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before CAS value = "
                    GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
        VAR name:res type:kotlin.Boolean [val]
          CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expect: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
            ARG update: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        VAR name:newValue type:kotlin.Int [val]
          CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testDefaultTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testDefaultTrace'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after CAS value = "
                    GET_VAR 'val newValue: kotlin.Int declared in <root>.TraceTest.testDefaultTrace' type=kotlin.Int origin=null
    FUN name:testMultipleAppend visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:i type:kotlin.Int [val]
          CONST Int type=kotlin.Int value=1
        CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event1: GET_VAR 'val i: kotlin.Int declared in <root>.TraceTest.testMultipleAppend' type=kotlin.Int origin=null
          ARG event2: GET_ENUM 'ENUM_ENTRY name:START' type=<root>.TraceTest.Status
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=0
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'public final fun incrementAndGet (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any, event3: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event1: GET_VAR 'val i: kotlin.Int declared in <root>.TraceTest.testMultipleAppend' type=kotlin.Int origin=null
          ARG event2: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event3: CONST String type=kotlin.String value="incAndGet"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=1
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun lazySet (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=10
        CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any, event3: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event1: GET_VAR 'val i: kotlin.Int declared in <root>.TraceTest.testMultipleAppend' type=kotlin.Int origin=null
          ARG event2: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event3: CONST String type=kotlin.String value="lazySet"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testMultipleAppend' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event1: GET_VAR 'val i: kotlin.Int declared in <root>.TraceTest.testMultipleAppend' type=kotlin.Int origin=null
          ARG event2: GET_ENUM 'ENUM_ENTRY name:END' type=<root>.TraceTest.Status
    FUN name:testNamedTrace visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
          ARG <this>: CALL 'private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=5
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-shortTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testNamedTrace'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before CAS value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expect: CONST Int type=kotlin.Int value=5
            ARG update: CONST Int type=kotlin.Int value=-2
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=-2
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-shortTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testNamedTrace'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after CAS value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-s> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testNamedTrace' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testTraceInBlock visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        CALL 'public final fun lazySet (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=null
          ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG value: CONST Int type=kotlin.Int value=5
        WHEN type=kotlin.Unit origin=IF
          BRANCH
            if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
              ARG arg0: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                  ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
              ARG arg1: CONST Int type=kotlin.Int value=5
            then: BLOCK type=kotlin.Unit origin=null
              CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
                ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
                  ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
                  FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
                    BLOCK_BODY
                      RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceInBlock'
                        CONST String type=kotlin.String value="Value checked"
              WHEN type=kotlin.Unit origin=IF
                BRANCH
                  if: CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
                    ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                      ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG expect: CONST Int type=kotlin.Int value=5
                    ARG update: CONST Int type=kotlin.Int value=10
                  then: BLOCK type=kotlin.Unit origin=null
                    CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
                      ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                      ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
                        FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
                          BLOCK_BODY
                            RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceInBlock'
                              CONST String type=kotlin.String value="CAS succeeded"
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=10
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        WHILE label=null origin=WHILE_LOOP
          condition: CONST Boolean type=kotlin.Boolean value=true
          body: BLOCK type=kotlin.Unit origin=null
            WHEN type=kotlin.Unit origin=IF
              BRANCH
                if: CALL 'public final fun EQEQ (arg0: kotlin.Any?, arg1: kotlin.Any?): kotlin.Boolean declared in kotlin.internal.ir' type=kotlin.Boolean origin=EQEQ
                  ARG arg0: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                    ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                      ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                  ARG arg1: CONST Int type=kotlin.Int value=10
                then: BLOCK type=kotlin.Unit origin=null
                  CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
                    ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
                      ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG event1: CONST String type=kotlin.String value="Value checked"
                    ARG event2: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                  CALL 'public final fun <set-value> (value: kotlin.Int): kotlin.Unit declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Unit origin=EQ
                    ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                      ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG value: CONST Int type=kotlin.Int value=15
                  BREAK label=null loop.label=null
              BRANCH
                if: CONST Boolean type=kotlin.Boolean value=true
                then: BLOCK type=kotlin.Unit origin=null
                  CALL 'public open fun append (event1: kotlin.Any, event2: kotlin.Any): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=null
                    ARG <this>: CALL 'private final fun <get-defaultTrace> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
                      ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
                    ARG event1: CONST String type=kotlin.String value="Wrong value"
                    ARG event2: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a1> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceInBlock' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testTraceWithFormat visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithFormat'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before CAS value = "
                    GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithFormat' type=kotlin.Int origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expect: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithFormat' type=kotlin.Int origin=null
            ARG update: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithFormat' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithFormat'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after CAS value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithFormat'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before getAndDecrement value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'public final fun getAndDecrement (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
            ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=19
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithFormat> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithFormat'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after getAndDecrement value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a3> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithFormat' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
    FUN name:testTraceWithSize visibility:public modality:FINAL returnType:kotlin.Unit
      VALUE_PARAMETER kind:DispatchReceiver name:<this> index:0 type:<root>.TraceTest
      BLOCK_BODY
        VAR name:oldValue type:kotlin.Int [val]
          CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithSize'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before CAS value = "
                    GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithSize' type=kotlin.Int origin=null
        CALL 'public final fun assertTrue (actual: kotlin.Boolean, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          ARG actual: CALL 'public final fun compareAndSet (expect: kotlin.Int, update: kotlin.Int): kotlin.Boolean declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Boolean origin=null
            ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
            ARG expect: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithSize' type=kotlin.Int origin=null
            ARG update: CALL 'public final fun times (other: kotlin.Int): kotlin.Int declared in kotlin.Int' type=kotlin.Int origin=MUL
              ARG <this>: GET_VAR 'val oldValue: kotlin.Int declared in <root>.TraceTest.testTraceWithSize' type=kotlin.Int origin=null
              ARG other: CONST Int type=kotlin.Int value=10
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithSize'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after CAS value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithSize'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="before getAndDecrement value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        TYPE_OP type=kotlin.Unit origin=IMPLICIT_COERCION_TO_UNIT typeOperand=kotlin.Unit
          CALL 'public final fun getAndDecrement (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=null
            ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun assertEquals <T> (expected: T of kotlin.test.assertEquals, actual: T of kotlin.test.assertEquals, message: kotlin.String?): kotlin.Unit declared in kotlin.test' type=kotlin.Unit origin=null
          TYPE_ARG T: kotlin.Int
          ARG expected: CONST Int type=kotlin.Int value=9
          ARG actual: CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
            ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
              ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
        CALL 'public final fun invoke (event: kotlin.Function0<kotlin.Any>): kotlin.Unit declared in kotlinx.atomicfu.TraceBase' type=kotlin.Unit origin=INVOKE
          ARG <this>: CALL 'private final fun <get-traceWithSize> (): kotlinx.atomicfu.TraceBase declared in <root>.TraceTest' type=kotlinx.atomicfu.TraceBase origin=GET_PROPERTY
            ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
          ARG event: FUN_EXPR type=kotlin.Function0<kotlin.Any> origin=LAMBDA
            FUN LOCAL_FUNCTION_FOR_LAMBDA name:<anonymous> visibility:local modality:FINAL returnType:kotlin.Any
              BLOCK_BODY
                RETURN type=kotlin.Nothing from='local final fun <anonymous> (): kotlin.Any declared in <root>.TraceTest.testTraceWithSize'
                  STRING_CONCATENATION type=kotlin.String
                    CONST String type=kotlin.String value="after getAndDecrement value = "
                    CALL 'public final fun <get-value> (): kotlin.Int declared in kotlinx.atomicfu.AtomicInt' type=kotlin.Int origin=GET_PROPERTY
                      ARG <this>: CALL 'private final fun <get-a2> (): kotlinx.atomicfu.AtomicInt declared in <root>.TraceTest' type=kotlinx.atomicfu.AtomicInt origin=GET_PROPERTY
                        ARG <this>: GET_VAR '<this>: <root>.TraceTest declared in <root>.TraceTest.testTraceWithSize' type=<root>.TraceTest origin=IMPLICIT_ARGUMENT
  FUN name:box visibility:public modality:FINAL returnType:kotlin.String
    BLOCK_BODY
      CALL 'public final fun test (): kotlin.Unit declared in <root>.TraceTest' type=kotlin.Unit origin=null
        ARG <this>: CONSTRUCTOR_CALL 'public constructor <init> () declared in <root>.TraceTest' type=<root>.TraceTest origin=null
      RETURN type=kotlin.Nothing from='public final fun box (): kotlin.String declared in <root>'
        CONST String type=kotlin.String value="OK"
